#!/bin/bash
set -e
source /system/library.sh
ARCHITECTURE=`cat /system/ARCHITECTURE`

function download_and_extract()
{
	local BASENAME="$1"
	local URL="$2"
	local regex='\.bz2$'

	run rm -f "$BASENAME"
	run wget -O "$BASENAME" "$URL"
	if [[ "$URL" =~ $regex ]]; then
		run tar xjf "$BASENAME"
	else
		run tar xzf "$BASENAME"
	fi
	run rm "$BASENAME"
}


CONCURRENCY=2
export PATH=/usr/local/override/bin:$PATH
if [[ "$ARCHITECTURE" = x86_64 ]]; then
	ARCHITECTURE_BITS=64
	export PATH=/system/bin64:$PATH
else
	ARCHITECTURE_BITS=32
	export PATH=/system/bin32:$PATH
fi

OPENSSL_VERSION=1.0.2r
FFI_VERSION=3.2.1
SQLITE3_VERSION=3270200

echo "----- chroot entered -----"
# Clear /tmp.
for F in *; do
	# During the first 'mock' run, mock somehow mounts /tmp/ccache which we
	# can't remove. So we skip this.
	if [[ "$F" != ccache ]]; then
		run rm -rf "/tmp/$F"
	fi
done
run rpm --rebuilddb
run yum install -y @development-tools gcc gcc-c++ wget m4 sudo zlib-devel \
	readline-devel ncurses-devel ccache compat-libtermcap \
  autoconf automake libtool
run mkdir -p /ccache
echo

header "Installing OpenSSL"
if [[ ! -e /usr/local/override/bin/openssl ]]; then
	download_and_extract openssl-$OPENSSL_VERSION.tar.gz \
		https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz
	echo "Entering openssl-$OPENSSL_VERSION"
	pushd openssl-$OPENSSL_VERSION >/dev/null

	run ./config --prefix=/usr/local/override --openssldir=/usr/local/override/openssl \
		threads zlib no-shared no-sse2 -fPIC -fvisibility=hidden
	run make
	run make install_sw
	run strip --strip-all /usr/local/override/bin/openssl
	run strip --strip-debug /usr/local/override/lib/libcrypto.a
	run strip --strip-debug /usr/local/override/lib/libssl.a
	run sed -i 's/^Libs:.*/Libs: -L${libdir} -lssl -lcrypto -ldl/' /usr/local/override/lib/pkgconfig/openssl.pc
	run sed -i 's/^Libs.private:.*/Libs.private: -L${libdir} -lssl -lcrypto -ldl -lz/' /usr/local/override/lib/pkgconfig/openssl.pc
	run sed -i 's/^Libs:.*/Libs: -L${libdir} -lssl -lcrypto -ldl/' /usr/local/override/lib/pkgconfig/libssl.pc
	run sed -i 's/^Libs.private:.*/Libs.private: -L${libdir} -lssl -lcrypto -ldl -lz/' /usr/local/override/lib/pkgconfig/libssl.pc

	echo "Leaving source directory"
	popd >/dev/null
	run rm -rf openssl-$OPENSSL_VERSION
fi
echo

header "Installing libffi"
LIBFFI_FILE=`echo /usr/local/override/lib*/libffi.so.6`
if [[ ! -e "$LIBFFI_FILE" ]]; then
	download_and_extract libffi-$FFI_VERSION.tar.gz \
		ftp://sourceware.org/pub/libffi/libffi-$FFI_VERSION.tar.gz
	echo "Entering libffi-$FFI_VERSION"
	pushd libffi-$FFI_VERSION >/dev/null

	run ./configure --prefix=/usr/local/override --enable-shared --disable-static \
		--enable-portable-binary
	run make -j$CONCURRENCY
	run make install-strip
	if [[ "$ARCHITECTURE" = x86_64 ]]; then
		run strip --strip-debug /usr/local/override/lib64/libffi.so.6
	else
		run strip --strip-debug /usr/local/override/lib/libffi.so.6
	fi
	
	echo "Leaving source directory"
	popd >/dev/null
	run rm -rf libffi-$FFI_VERSION
fi
echo

header "Installing SQLite3"
if [[ ! -e /usr/local/override/lib/libsqlite3.a ]]; then
	download_and_extract sqlite-autoconf-$SQLITE3_VERSION.tar.gz \
		http://www.sqlite.org/2019/sqlite-autoconf-$SQLITE3_VERSION.tar.gz
	echo "Entering sqlite-autoconf-$SQLITE3_VERSION"
	pushd sqlite-autoconf-$SQLITE3_VERSION >/dev/null

	run ./configure --prefix=/usr/local/override --disable-shared \
		--disable-dynamic-extensions CFLAGS='-O2 -fPIC -fvisibility=hidden'
	run make -j$CONCURRENCY
	run make install-strip

	echo "Leaving source directory"
	popd >/dev/null
	run rm -rf sqlite-autoconf-$SQLITE3_VERSION
fi
echo

