#!/bin/bash
set -e

SELFDIR=`dirname "$0"`
SELFDIR=`cd "$SELFDIR" && pwd`
source "$SELFDIR/internal/reset_environment.sh"
source "$SELFDIR/../shared/library.sh"

TEMPDIR=

RUNTIME_DIR=
CONCURRENCY=4
FORCE_OPENSSL=false
SKIP_OPENSSL=false
FORCE_NCURSES=false
SKIP_NCURSES=true # use system version
FORCE_READLINE=false
SKIP_READLINE=false
FORCE_LIBFFI=false
SKIP_LIBFFI=true # use system version
FORCE_LIBYAML=false
SKIP_LIBYAML=false
FORCE_SQLITE3=false
SKIP_SQLITE3=false

function _cleanup()
{
	if [[ "$TEMPDIR" != "" ]]; then
		rm -rf "$TEMPDIR"
	fi
}

function download_and_extract()
{
	local BASENAME="$1"
	local URL="$2"
	local regex='\.bz2$'

  if [[ ! -f "$BASENAME" ]]; then
    run curl --fail -L -o "$BASENAME" "$URL"
  fi
	if [[ "$URL" =~ $regex ]]; then
		run tar xjf "$BASENAME"
	else
		run tar xzf "$BASENAME"
	fi
}

function usage()
{
	echo "Usage: ./setup-runtime [options] <RUNTIME DIR>"
	echo "Sets up the Traveling Ruby build system's runtime."
	echo
	echo "Options:"
	echo "  -o      Force installing OpenSSL"
	echo "  -O      Skip installing OpenSSL"
	echo "  -r      Force installing readline"
	echo "  -R      Skip installing readline"
	echo "  -f      Force installing libffi"
	echo "  -F      Skip installing libffi"
	echo "  -y      Force installing libyaml"
	echo "  -Y      Skip installing libyaml"
	echo "  -s      Force installing sqlite3"
	echo "  -S      Skip installing sqlite3"
	echo
	echo "  -j NUM  Compilation concurrency. Default: 4"
	echo "  -h      Show this help"
}

function parse_options()
{
	local OPTIND=1
	local opt
	while getopts "oOyYsS:h" opt; do
		case "$opt" in
		o)
			FORCE_OPENSSL=true
			;;
		O)
			SKIP_OPENSSL=true
			;;
		f)
			FORCE_LIBFFI=true
			;;
		F)
			SKIP_LIBFFI=true
			;;
    r)
			FORCE_READLINE=true
			;;
		R)
			SKIP_READLINE=true
			;;
		y)
			FORCE_LIBYAML=true
			;;
		Y)
			SKIP_LIBYAML=true
			;;
		s)
			FORCE_SQLITE3=true
			;;
		S)
			SKIP_SQLITE3=true
			;;
		j)
			CONCURRENCY=$OPTARG
			;;
		h)
			usage
			exit
			;;
		*)
			return 1
			;;
		esac
	done

	(( OPTIND -= 1 )) || true
	shift $OPTIND || true
	RUNTIME_DIR="$1"

	if [[ "$RUNTIME_DIR" = "" ]]; then
		usage
		exit 1
	fi
}

parse_options "$@"
mkdir -p "$RUNTIME_DIR"
RUNTIME_DIR="`cd \"$RUNTIME_DIR\" && pwd`"
"$SELFDIR/internal/check_sdk"


#######################################


TOTAL_TOOLS=6
TOTAL_LIBS=12
OPENSSL_VERSION=1.1.1b
READLINE_VERSION=8.0
LIBFFI_VERSION=3.2.1
LIBYAML_VERSION=0.2.2
SQLITE3_VERSION=3270200
export PATH="$RUNTIME_DIR/bin:$PATH"
export LIBRARY_PATH="$RUNTIME_DIR/lib"
export DYLD_FALLBACK_LIBRARY_PATH="$RUNTIME_DIR/lib"
export PKG_CONFIG_PATH="$RUNTIME_DIR/lib/pkgconfig:/usr/lib/pkgconfig"
export RUNTIME_DIR
export DEAD_STRIP=true


header "Initializing..."
run mkdir -p "$RUNTIME_DIR"
echo "Entering $RUNTIME_DIR"
cd "$RUNTIME_DIR"
echo


BUILD_TOOLS="cmake autoconf automake pkg-config libtool"
header "Installing tool ${BUILD_TOOLS}by homebrew..."
HOMEBREW_NO_AUTO_UPDATE=1 brew install $BUILD_TOOLS || true

header "Compiling runtime libraries 1/$TOTAL_LIBS: OpenSSL..."
if $SKIP_OPENSSL; then
	echo "Skipped."
elif [[ ! -e "$RUNTIME_DIR/lib/openssl-ok" ]] || $FORCE_OPENSSL; then
  download_and_extract openssl-$OPENSSL_VERSION.tar.gz \
    https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz

	echo "Entering $RUNTIME_DIR/openssl-$OPENSSL_VERSION"
	pushd openssl-$OPENSSL_VERSION >/dev/null

	run ./Configure darwin64-x86_64-cc --prefix="$RUNTIME_DIR" --openssldir="$RUNTIME_DIR/openssl" \
		threads zlib shared no-sse2
	# For some reason the -j1 is explicitly required. Otherwise, running `make -j2`
	# on the Makefile which invoked setup-runtime could somehow pass the -j2 to sub-makes.
	run make -j1
	run make install_sw

	echo "Leaving source directory"
	popd >/dev/null
	run rm -rf openssl-$OPENSSL_VERSION

	run chmod u+rw lib/*.dylib
	run rm lib/libcrypto.a
	run rm lib/libssl.a
	run strip bin/openssl
	run strip -S lib/libcrypto.dylib
	run strip -S lib/libssl.dylib
	run install_name_tool -id "@executable_path/../lib/libssl.1.1.dylib" \
		"$RUNTIME_DIR/lib/libssl.1.1.dylib"
	run install_name_tool -change \
		"$RUNTIME_DIR/lib/libcrypto.1.1.dylib" "@executable_path/../lib/libcrypto.1.1.dylib" \
		"$RUNTIME_DIR/lib/libssl.1.1.dylib"
	run install_name_tool -id "@executable_path/../lib/libcrypto.1.1.dylib" \
		"$RUNTIME_DIR/lib/libcrypto.1.1.dylib"

	run sed -i '' 's/^Libs\.private:.*/Libs.private: -L\${libdir} -lssl -lcrypto -lz/' "$RUNTIME_DIR/lib/pkgconfig/openssl.pc"
	run sed -i '' 's/^Libs\.private:.*/Libs.private: -L\${libdir} -lssl -lcrypto -lz/' "$RUNTIME_DIR/lib/pkgconfig/libssl.pc"
	touch "$RUNTIME_DIR/lib/openssl-ok"
else
	echo "Already installed."
fi
echo


header "Compiling runtime libraries 3/$TOTAL_LIBS: readline..."
if $SKIP_READLINE; then
	echo "Skipped."
elif [[ ! -e "$RUNTIME_DIR/lib/libreadline.8.dylib" ]] || $FORCE_READLINE; then
  PKG_NAME="readline-$READLINE_VERSION"
  download_and_extract $PKG_NAME.tar.gz \
	  ftp://ftp.cwru.edu/pub/bash/$PKG_NAME.tar.gz
	echo "Entering $RUNTIME_DIR/$PKG_NAME"
	pushd $PKG_NAME >/dev/null

	run ./configure --prefix="$RUNTIME_DIR" --disable-static --enable-widec
	run make -j$CONCURRENCY
	run make install
	
	echo "Leaving source directory"
	popd >/dev/null
	run rm -rf $PKG_NAME

	pushd "$RUNTIME_DIR/lib" >/dev/null
	run ln -sf libreadline.8.dylib libreadline.dylib
	popd >/dev/null
	run install_name_tool -id "@executable_path/../lib/libreadline.8.dylib" \
		"$RUNTIME_DIR/lib/libreadline.8.dylib"
	run install_name_tool -id "@executable_path/../lib/libhistory.8.dylib" \
		"$RUNTIME_DIR/lib/libhistory.8.dylib"
else
	echo "Already installed."
fi
echo


header "Compiling runtime libraries 5/$TOTAL_LIBS: libffi..."
if $SKIP_LIBFFI; then
	echo "Skipped."
elif [[ ! -e "$RUNTIME_DIR/lib/libffi.6.dylib" ]] || $FORCE_LIBFFI; then
  download_and_extract libffi-$LIBFFI_VERSION.tar.gz \
	  ftp://sourceware.org/pub/libffi/libffi-$LIBFFI_VERSION.tar.gz
	echo "Entering $RUNTIME_DIR/libffi-$LIBFFI_VERSION"
	pushd libffi-$LIBFFI_VERSION >/dev/null

	run env CFLAGS="-O3 -fomit-frame-pointer -fstrict-aliasing -ffast-math -Wall -fexceptions -fPIC" \
		./configure --prefix="$RUNTIME_DIR" --disable-static --enable-portable-binary
	run make -j$CONCURRENCY
	run make install-strip
	
	echo "Leaving source directory"
	popd >/dev/null
	run rm -rf libffi-$LIBFFI_VERSION

	run install_name_tool -id "@executable_path/../lib/libffi.6.dylib" \
		"$RUNTIME_DIR/lib/libffi.6.dylib"
else
	echo "Already installed."
fi
echo

header "Compiling runtime libraries 6/$TOTAL_LIBS: libyaml..."
if $SKIP_LIBYAML; then
	echo "Skipped."
elif [[ ! -e "$RUNTIME_DIR/lib/libyaml-0.2.dylib" ]] || $FORCE_LIBYAML; then
	download_and_extract yaml-$LIBYAML_VERSION.tar.gz \
		http://pyyaml.org/download/libyaml/yaml-$LIBYAML_VERSION.tar.gz
	echo "Entering $RUNTIME_DIR/libyaml-$LIBYAML_VERSION"
	pushd yaml-$LIBYAML_VERSION >/dev/null

	run ./configure --prefix="$RUNTIME_DIR" --disable-static
	run make -j$CONCURRENCY
	run make install-strip
	
	echo "Leaving source directory"
	popd >/dev/null
	run rm -rf yaml-$LIBYAML_VERSION

	run install_name_tool -id "@executable_path/../lib/libyaml-0.2.dylib" \
		"$RUNTIME_DIR/lib/libyaml-0.2.dylib"
else
	echo "Already installed."
fi
echo

header "Compiling runtime libraries 7/$TOTAL_LIBS: sqlite3..."
if $SKIP_SQLITE3; then
	echo "Skipped."
elif [[ ! -e "$RUNTIME_DIR/lib/libsqlite3.0.dylib" ]] || $FORCE_SQLITE3; then
	download_and_extract sqlite-autoconf-$SQLITE3_VERSION.tar.gz \
		http://www.sqlite.org/2019/sqlite-autoconf-$SQLITE3_VERSION.tar.gz
	echo "Entering $RUNTIME_DIR/sqlite-autoconf-$SQLITE3_VERSION"
	pushd sqlite-autoconf-$SQLITE3_VERSION >/dev/null

	run ./configure --prefix="$RUNTIME_DIR" CFLAGS='-Os -fPIC'
	run make -j$CONCURRENCY
	run make install-strip
	echo "Entering $RUNTIME_DIR"
	popd >/dev/null
	run rm -rf sqlite-autoconf-$SQLITE3_VERSION
  rm "$RUNTIME_DIR/lib/libsqlite3.a"

	run install_name_tool -id "@executable_path/../lib/libsqlite3.0.dylib" \
		"$RUNTIME_DIR/lib/libsqlite3.0.dylib"
else
	echo "Already installed."
fi
echo

header "All done!"
